module Year2017.Day23 where

import Prelude
import Data.Set as Set
import Data.Set (Set)
import Control.Alternative ((<|>))
import Control.Monad.Eff (Eff)
import Control.Monad.Eff.Class (class MonadEff, liftEff)
import Control.Monad.Eff.Console (CONSOLE, log, logShow)
import Control.Monad.Eff.Exception (EXCEPTION)
import Control.Monad.Rec.Class (Step(Loop, Done), tailRecM)
import Control.Monad.State (class MonadState, execStateT)
import Data.Array as Array
import Data.BigInt (BigInt, fromInt)
import Data.BigInt as BigInt
import Data.Either (Either(Right, Left))
import Data.Lens (Lens', assignJust, modifying, use, view)
import Data.Lens.At (at)
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.List (List)
import Data.List as List
import Data.Map (Map)
import Data.Map as Map
import Data.Maybe (Maybe(..), fromMaybe)
import Data.Newtype (class Newtype)
import Data.String as String
import Data.Symbol (SProxy(..))
import Data.Traversable (traverse)
import Node.FS (FS)
import ParserUtils (integer, mustSucceed, parseFile)
import Text.Parsing.StringParser (Parser)
import Text.Parsing.StringParser.Combinators (many, optionMaybe, optional, (<?>))
import Text.Parsing.StringParser.String (anyLetter, char, noneOf, string)

data Instruction
  = Set Char Target
  | Subtract Char Target
  | Multiply Char Target
  | JumpNonZero Target Target
  | JumpIfPrime Char BigInt

type Target = Either BigInt Char

derive instance eqInstruction :: Eq Instruction
instance showInstruction :: Show Instruction where
  show (Set char target) = "Set " <> String.singleton char <> " " <> showTarget target
  show (Subtract char target) = "Subtract " <> String.singleton char <> " " <> showTarget target
  show (Multiply char target) = "Multiply " <> String.singleton char <> " " <> showTarget target
  show (JumpIfPrime char skip) = "JumpIfPrime " <> String.singleton char <> " " <> show skip
  show (JumpNonZero char target) = "JumpNonZero " <> showTarget char <> " " <> showTarget target

showTarget :: Target -> String
showTarget (Left n) = BigInt.toString n
showTarget (Right c) = String.singleton c

newtype Memory = Memory
  { counter :: BigInt
  , registers :: Map Char BigInt
  , multiplyCounter :: BigInt
  }

derive instance newtypeMemory :: Newtype Memory _
derive instance eqMemory :: Eq Memory

_counter :: Lens' Memory BigInt
_counter = _Newtype <<< prop (SProxy :: SProxy "counter")

_registers :: Lens' Memory (Map Char BigInt)
_registers = _Newtype <<< prop (SProxy :: SProxy "registers")

_multiplyCounter :: Lens' Memory BigInt
_multiplyCounter = _Newtype <<< prop (SProxy :: SProxy "multiplyCounter")

initialMemory :: BigInt -> Memory
initialMemory debug = Memory
  { counter: zero
  , registers: Map.singleton 'a' debug
  , multiplyCounter: zero
  }

readInput :: forall eff.
  String
  -> Eff
    (fs :: FS, exception :: EXCEPTION | eff)
    (List Instruction)
readInput filename =
  List.catMaybes <$> (parseFile (enhancedInstructionParser) filename >>= mustSucceed)

enhancedInstructionParser :: Parser (Maybe Instruction)
enhancedInstructionParser = do
  _ <- many (char ' ')
  instruction <- optionMaybe instructionParser
  _ <- many (char ' ')
  _ <- optional (string "-- " *> many (noneOf ['\n']))
  pure instruction

instructionParser :: Parser Instruction
instructionParser =
  (Set <$> (string "set " *> anyLetter) <*> (string " " *> targetParser) <?> "Expected a SET command")
  <|>
  (Subtract <$> (string "sub " *> anyLetter) <*> (string " " *> targetParser) <?> "Expected a SUB command")
  <|>
  (Multiply <$> (string "mul " *> anyLetter) <*> (string " " *> targetParser) <?> "Expected a MUL command")
  <|>
  (JumpIfPrime <$> (string "jip " *> anyLetter) <*> (string " " *> (fromInt <$> integer))<?> "Expected a JIP command")
  <|>
  (JumpNonZero <$> (string "jnz " *> targetParser) <*> (string " " *> targetParser)<?> "Expected a JNZ command")

targetParser :: Parser Target
targetParser =
  (Left <<< fromInt <$> integer)
  <|>
  (Right <$> anyLetter)

------------------------------------------------------------

valueOf :: forall m. MonadState Memory m => Target -> m BigInt
valueOf (Left n) = pure n
valueOf (Right char) = fromMaybe zero <$> use (_registers <<< at char)

tickCounter :: forall m. MonadState Memory m => m Unit
tickCounter = modifying _counter ((+) one)

debug ::
  forall m eff.
  MonadEff (console :: CONSOLE | eff) m
  => MonadState Memory m
  => Instruction
  -> m Instruction
debug instruction = do
  reg <- use _registers
  regStr <-
    String.joinWith " " <$>
    (traverse (\r -> do v <- use (_registers <<< at r)
                        pure $ String.singleton r <> ": " <> BigInt.toString (fromMaybe zero v)) $ String.toCharArray "abcdefgh")
  when (instruction == Set 'g' (Right 'd'))
    (liftEff $ logShow "----")
  liftEff $ log regStr
  liftEff $ logShow instruction
  pure instruction

eval :: forall m. MonadState Memory m => Instruction -> m Unit
eval (JumpIfPrime source skip) = do
  sourceValue <- fromMaybe zero <$> use (_registers <<< at source)
  modifying _counter ((+) (if (Set.member sourceValue thosePrimes)
                           then skip
                           else one))
eval (JumpNonZero source target) = do
  sourceValue <- valueOf source
  targetValue <- valueOf target
  modifying _counter ((+) (if sourceValue /= zero
                           then targetValue
                           else one))
eval (Set char target) = do
  v <- valueOf target
  assignJust (_registers <<< at char) v
  tickCounter
eval (Subtract char target) = do
  v <- valueOf target
  modifying (_registers <<< at char) (Just <<< (\x -> x - v) <<< fromMaybe zero)
  tickCounter
eval (Multiply char target) = do
  v <- valueOf target
  modifying (_registers <<< at char) (Just <<< (*) v <<< fromMaybe zero)
  modifying (_multiplyCounter) ((+) one)
  tickCounter

runCPU :: forall eff. Array Instruction -> Memory -> Eff (console :: CONSOLE | eff) Memory
runCPU instructions =
  tailRecM go
  where
    go memory =
      case Array.index instructions (degree (view _counter memory)) of
        Nothing -> pure $ Done memory
        Just instruction -> do
          Loop <$> execStateT (eval  instruction) memory

solution1 :: forall eff. Eff (fs :: FS, exception :: EXCEPTION, console :: CONSOLE | eff) Memory
solution1 = do
  instructions <- Array.fromFoldable <$> readInput "src/Year2017/Day23.txt"
  runCPU instructions (initialMemory zero)

solution2 :: forall eff.
  Eff (fs :: FS, exception :: EXCEPTION, console :: CONSOLE | eff)
    Memory
solution2 = do
  instructions <- Array.fromFoldable <$> readInput "src/Year2017/Day23-optimised.txt"
  runCPU instructions (initialMemory one)

-- | Ha ha, lookup table. :-D
thosePrimes :: Set BigInt
thosePrimes =
  Set.fromFoldable $ map fromInt $
  [108401,108413,108421,108439,108457,108461,108463,108497,108499,108503,
  108517,108529,108533,108541,108553,108557,108571,108587,108631,108637,
  108643,108649,108677,108707,108709,108727,108739,108751,108761,108769,
  108791,108793,108799,108803,108821,108827,108863,108869,108877,108881,
  108883,108887,108893,108907,108917,108923,108929,108943,108947,108949,
  108959,108961,108967,108971,108991,109001,109013,109037,109049,109063,
  109073,109097,109103,109111,109121,109133,109139,109141,109147,109159,
  109169,109171,109199,109201,109211,109229,109253,109267,109279,109297,
  109303,109313,109321,109331,109357,109363,109367,109379,109387,109391,
  109397,109423,109433,109441,109451,109453,109469,109471,109481,109507,
  109517,109519,109537,109541,109547,109567,109579,109583,109589,109597,
  109609,109619,109621,109639,109661,109663,109673,109717,109721,109741,
  109751,109789,109793,109807,109819,109829,109831,109841,109843,109847,
  109849,109859,109873,109883,109891,109897,109903,109913,109919,109937,
  109943,109961,109987,110017,110023,110039,110051,110059,110063,110069,
  110083,110119,110129,110161,110183,110221,110233,110237,110251,110261,
  110269,110273,110281,110291,110311,110321,110323,110339,110359,110419,
  110431,110437,110441,110459,110477,110479,110491,110501,110503,110527,
  110533,110543,110557,110563,110567,110569,110573,110581,110587,110597,
  110603,110609,110623,110629,110641,110647,110651,110681,110711,110729,
  110731,110749,110753,110771,110777,110807,110813,110819,110821,110849,
  110863,110879,110881,110899,110909,110917,110921,110923,110927,110933,
  110939,110947,110951,110969,110977,110989,111029,111031,111043,111049,
  111053,111091,111103,111109,111119,111121,111127,111143,111149,111187,
  111191,111211,111217,111227,111229,111253,111263,111269,111271,111301,
  111317,111323,111337,111341,111347,111373,111409,111427,111431,111439,
  111443,111467,111487,111491,111493,111497,111509,111521,111533,111539,
  111577,111581,111593,111599,111611,111623,111637,111641,111653,111659,
  111667,111697,111721,111731,111733,111751,111767,111773,111779,111781,
  111791,111799,111821,111827,111829,111833,111847,111857,111863,111869,
  111871,111893,111913,111919,111949,111953,111959,111973,111977,111997,
  112019,112031,112061,112067,112069,112087,112097,112103,112111,112121,
  112129,112139,112153,112163,112181,112199,112207,112213,112223,112237,
  112241,112247,112249,112253,112261,112279,112289,112291,112297,112303,
  112327,112331,112337,112339,112349,112361,112363,112397,112403,112429,
  112459,112481,112501,112507,112543,112559,112571,112573,112577,112583,
  112589,112601,112603,112621,112643,112657,112663,112687,112691,112741,
  112757,112759,112771,112787,112799,112807,112831,112843,112859,112877,
  112901,112909,112913,112919,112921,112927,112939,112951,112967,112979,
  112997,113011,113017,113021,113023,113027,113039,113041,113051,113063,
  113081,113083,113089,113093,113111,113117,113123,113131,113143,113147,
  113149,113153,113159,113161,113167,113171,113173,113177,113189,113209,
  113213,113227,113233,113279,113287,113327,113329,113341,113357,113359,
  113363,113371,113381,113383,113417,113437,113453,113467,113489,113497,
  113501,113513,113537,113539,113557,113567,113591,113621,113623,113647,
  113657,113683,113717,113719,113723,113731,113749,113759,113761,113777,
  113779,113783,113797,113809,113819,113837,113843,113891,113899,113903,
  113909,113921,113933,113947,113957,113963,113969,113983,113989,114001,
  114013,114031,114041,114043,114067,114073,114077,114083,114089,114113,
  114143,114157,114161,114167,114193,114197,114199,114203,114217,114221,
  114229,114259,114269,114277,114281,114299,114311,114319,114329,114343,
  114371,114377,114407,114419,114451,114467,114473,114479,114487,114493,
  114547,114553,114571,114577,114593,114599,114601,114613,114617,114641,
  114643,114649,114659,114661,114671,114679,114689,114691,114713,114743,
  114749,114757,114761,114769,114773,114781,114797,114799,114809,114827,
  114833,114847,114859,114883,114889,114901,114913,114941,114967,114973,
  114997,115001,115013,115019,115021,115057,115061,115067,115079,115099,
  115117,115123,115127,115133,115151,115153,115163,115183,115201,115211,
  115223,115237,115249,115259,115279,115301,115303,115309,115319,115321,
  115327,115331,115337,115343,115361,115363,115399,115421,115429,115459,
  115469,115471,115499,115513,115523,115547,115553,115561,115571,115589,
  115597,115601,115603,115613,115631,115637,115657,115663,115679,115693,
  115727,115733,115741,115751,115757,115763,115769,115771,115777,115781,
  115783,115793,115807,115811,115823,115831,115837,115849,115853,115859,
  115861,115873,115877,115879,115883,115891,115901,115903,115931,115933,
  115963,115979,115981,115987,116009,116027,116041,116047,116089,116099,
  116101,116107,116113,116131,116141,116159,116167,116177,116189,116191,
  116201,116239,116243,116257,116269,116273,116279,116293,116329,116341,
  116351,116359,116371,116381,116387,116411,116423,116437,116443,116447,
  116461,116471,116483,116491,116507,116531,116533,116537,116539,116549,
  116579,116593,116639,116657,116663,116681,116687,116689,116707,116719,
  116731,116741,116747,116789,116791,116797,116803,116819,116827,116833,
  116849,116867,116881,116903,116911,116923,116927,116929,116933,116953,
  116959,116969,116981,116989,116993,117017,117023,117037,117041,117043,
  117053,117071,117101,117109,117119,117127,117133,117163,117167,117191,
  117193,117203,117209,117223,117239,117241,117251,117259,117269,117281,
  117307,117319,117329,117331,117353,117361,117371,117373,117389,117413,
  117427,117431,117437,117443,117497,117499,117503,117511,117517,117529,
  117539,117541,117563,117571,117577,117617,117619,117643,117659,117671,
  117673,117679,117701,117703,117709,117721,117727,117731,117751,117757,
  117763,117773,117779,117787,117797,117809,117811,117833,117839,117841,
  117851,117877,117881,117883,117889,117899,117911,117917,117937,117959,
  117973,117977,117979,117989,117991,118033,118037,118043,118051,118057,
  118061,118081,118093,118127,118147,118163,118169,118171,118189,118211,
  118213,118219,118247,118249,118253,118259,118273,118277,118297,118343,
  118361,118369,118373,118387,118399,118409,118411,118423,118429,118453,
  118457,118463,118471,118493,118529,118543,118549,118571,118583,118589,
  118603,118619,118621,118633,118661,118669,118673,118681,118687,118691,
  118709,118717,118739,118747,118751,118757,118787,118799,118801,118819,
  118831,118843,118861,118873,118891,118897,118901,118903,118907,118913,
  118927,118931,118967,118973,119027,119033,119039,119047,119057,119069,
  119083,119087,119089,119099,119101,119107,119129,119131,119159,119173,
  119179,119183,119191,119227,119233,119237,119243,119267,119291,119293,
  119297,119299,119311,119321,119359,119363,119389,119417,119419,119429,
  119447,119489,119503,119513,119533,119549,119551,119557,119563,119569,
  119591,119611,119617,119627,119633,119653,119657,119659,119671,119677,
  119687,119689,119699,119701,119723,119737,119747,119759,119771,119773,
  119783,119797,119809,119813,119827,119831,119839,119849,119851,119869,
  119881,119891,119921,119923,119929,119953,119963,119971,119981,119983,
  119993,120011,120017,120041,120047,120049,120067,120077,120079,120091,
  120097,120103,120121,120157,120163,120167,120181,120193,120199,120209,
  120223,120233,120247,120277,120283,120293,120299,120319,120331,120349,
  120371,120383,120391,120397,120401,120413,120427,120431,120473,120503,
  120511,120539,120551,120557,120563,120569,120577,120587,120607,120619,
  120623,120641,120647,120661,120671,120677,120689,120691,120709,120713,
  120721,120737,120739,120749,120763,120767,120779,120811,120817,120823,
  120829,120833,120847,120851,120863,120871,120877,120889,120899,120907,
  120917,120919,120929,120937,120941,120943,120947,120977,120997,121001,
  121007,121013,121019,121021,121039,121061,121063,121067,121081,121123,
  121139,121151,121157,121169,121171,121181,121189,121229,121259,121267,
  121271,121283,121291,121309,121313,121321,121327,121333,121343,121349,
  121351,121357,121367,121369,121379,121403,121421,121439,121441,121447,
  121453,121469,121487,121493,121501,121507,121523,121531,121547,121553,
  121559,121571,121577,121579,121591,121607,121609,121621,121631,121633,
  121637,121661,121687,121697,121711,121721,121727,121763,121787,121789,
  121843,121853,121867,121883,121889,121909,121921,121931,121937,121949,
  121951,121963,121967,121993,121997,122011,122021,122027,122029,122033,
  122039,122041,122051,122053,122069,122081,122099,122117,122131,122147,
  122149,122167,122173,122201,122203,122207,122209,122219,122231,122251,
  122263,122267,122273,122279,122299,122321,122323,122327,122347,122363,
  122387,122389,122393,122399,122401,122443,122449,122453,122471,122477,
  122489,122497,122501,122503,122509,122527,122533,122557,122561,122579,
  122597,122599,122609,122611,122651,122653,122663,122693,122701,122719,
  122741,122743,122753,122761,122777,122789,122819,122827,122833,122839,
  122849,122861,122867,122869,122887,122891,122921,122929,122939,122953,
  122957,122963,122971,123001,123007,123017,123031,123049,123059,123077,
  123083,123091,123113,123121,123127,123143,123169,123191,123203,123209,
  123217,123229,123239,123259,123269,123289,123307,123311,123323,123341,
  123373,123377,123379,123397,123401,123407,123419,123427,123433,123439,
  123449,123457,123479,123491,123493,123499,123503,123517,123527,123547,
  123551,123553,123581,123583,123593,123601,123619,123631,123637,123653,
  123661,123667,123677,123701,123707,123719,123727,123731,123733,123737,
  123757,123787,123791,123803,123817,123821,123829,123833,123853,123863,
  123887,123911,123923,123931,123941,123953,123973,123979,123983,123989,
  123997,124001,124021,124067,124087,124097,124121,124123,124133,124139,
  124147,124153,124171,124181,124183,124193,124199,124213,124231,124247,
  124249,124277,124291,124297,124301,124303,124309,124337,124339,124343,
  124349,124351,124363,124367,124427,124429,124433,124447,124459,124471,
  124477,124489,124493,124513,124529,124541,124543,124561,124567,124577,
  124601,124633,124643,124669,124673,124679,124693,124699,124703,124717,
  124721,124739,124753,124759,124769,124771,124777,124781,124783,124793,
  124799,124819,124823,124847,124853,124897,124907,124909,124919,124951,
  124979,124981,124987,124991,125003,125017,125029,125053,125063,125093,
  125101,125107,125113,125117,125119,125131,125141,125149,125183,125197,
  125201,125207,125219,125221,125231,125243,125261,125269,125287,125299,
  125303,125311,125329,125339,125353,125371,125383,125387,125399]
